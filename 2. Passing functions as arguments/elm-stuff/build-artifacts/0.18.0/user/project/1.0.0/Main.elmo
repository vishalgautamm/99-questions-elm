var _user$project$Main_ops = _user$project$Main_ops || {};
_user$project$Main_ops['..'] = F2(
	function (start, end) {
		return A2(_elm_lang$core$List$range, start, end);
	});
var _user$project$Main$sortByListLengths = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$List$length, xs);
};
var _user$project$Main$test = _elm_lang$core$List$length(
	A2(
		_elm_lang$core$List$filter,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(false),
		{
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.eq(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$List$length,
					_user$project$Main$sortByListLengths(
						{
							ctor: '::',
							_0: {ctor: '[]'},
							_1: {
								ctor: '::',
								_0: {
									ctor: '::',
									_0: 1,
									_1: {ctor: '[]'}
								},
								_1: {
									ctor: '::',
									_0: A2(_user$project$Main_ops['..'], 1, 2),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Main_ops['..'], 1, 3),
										_1: {
											ctor: '::',
											_0: A2(_user$project$Main_ops['..'], 1, 4),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Main_ops['..'], 1, 5),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						})),
				{
					ctor: '::',
					_0: 0,
					_1: {
						ctor: '::',
						_0: 1,
						_1: {
							ctor: '::',
							_0: 2,
							_1: {
								ctor: '::',
								_0: 3,
								_1: {
									ctor: '::',
									_0: 4,
									_1: {
										ctor: '::',
										_0: 5,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$List$length,
						_user$project$Main$sortByListLengths(
							{
								ctor: '::',
								_0: {ctor: '[]'},
								_1: {ctor: '[]'}
							})),
					{
						ctor: '::',
						_0: 0,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.eq(
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$length,
							_user$project$Main$sortByListLengths(
								{
									ctor: '::',
									_0: {ctor: '[]'},
									_1: {
										ctor: '::',
										_0: {
											ctor: '::',
											_0: 1,
											_1: {ctor: '[]'}
										},
										_1: {
											ctor: '::',
											_0: A2(_user$project$Main_ops['..'], 1, 100000),
											_1: {
												ctor: '::',
												_0: A2(_user$project$Main_ops['..'], 1, 4),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Main_ops['..'], 1, 3),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Main_ops['..'], 1, 2),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								})),
						{
							ctor: '::',
							_0: 0,
							_1: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 2,
									_1: {
										ctor: '::',
										_0: 3,
										_1: {
											ctor: '::',
											_0: 4,
											_1: {
												ctor: '::',
												_0: 100000,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(
							A2(
								_elm_lang$core$List$map,
								_elm_lang$core$List$length,
								_user$project$Main$sortByListLengths(
									{
										ctor: '::',
										_0: {
											ctor: '::',
											_0: 14,
											_1: {ctor: '[]'}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '::',
												_0: 15,
												_1: {ctor: '[]'}
											},
											_1: {
												ctor: '::',
												_0: {ctor: '[]'},
												_1: {
													ctor: '::',
													_0: {
														ctor: '::',
														_0: 1,
														_1: {ctor: '[]'}
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '::',
															_0: 12,
															_1: {ctor: '[]'}
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '::',
																_0: 13,
																_1: {ctor: '[]'}
															},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									})),
							{
								ctor: '::',
								_0: 0,
								_1: {
									ctor: '::',
									_0: 1,
									_1: {
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 1,
											_1: {
												ctor: '::',
												_0: 1,
												_1: {
													ctor: '::',
													_0: 1,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(
								A2(
									_elm_lang$core$List$map,
									_elm_lang$core$List$length,
									_user$project$Main$sortByListLengths(
										{
											ctor: '::',
											_0: {
												ctor: '::',
												_0: 'a',
												_1: {
													ctor: '::',
													_0: 'b',
													_1: {
														ctor: '::',
														_0: 'c',
														_1: {ctor: '[]'}
													}
												}
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '::',
													_0: 'a',
													_1: {
														ctor: '::',
														_0: 'b',
														_1: {ctor: '[]'}
													}
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '::',
														_0: 'a',
														_1: {ctor: '[]'}
													},
													_1: {ctor: '[]'}
												}
											}
										})),
								{
									ctor: '::',
									_0: 1,
									_1: {
										ctor: '::',
										_0: 2,
										_1: {
											ctor: '::',
											_0: 3,
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}));
var _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	_elm_lang$html$Html$text(
		function () {
			var _p0 = _user$project$Main$test;
			switch (_p0) {
				case 0:
					return 'Your implementation passed all tests.';
				case 1:
					return 'Your implementation failed one test.';
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'Your implementation failed ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p0),
							' tests.'));
			}
		}()));
