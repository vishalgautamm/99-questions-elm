var _user$project$Main$gcd = F2(
	function (a, b) {
		gcd:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(b, 0)) {
				return a;
			} else {
				var _v0 = _elm_lang$core$Basics$abs(b),
					_v1 = A2(_elm_lang$core$Basics_ops['%'], a, b);
				a = _v0;
				b = _v1;
				continue gcd;
			}
		}
	});
var _user$project$Main$coprime = F2(
	function (a, b) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_user$project$Main$gcd, a, b),
			1);
	});
var _user$project$Main$totient = function (n) {
	return _elm_lang$core$List$length(
		A2(
			_elm_lang$core$List$filter,
			function (x) {
				return A2(_user$project$Main$coprime, n, x);
			},
			A2(_elm_lang$core$List$range, 1, n)));
};
var _user$project$Main$test = _elm_lang$core$List$length(
	A2(
		_elm_lang$core$List$filter,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(false),
		{
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.eq(
				_user$project$Main$totient(10),
				4),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(
					_user$project$Main$totient(25),
					20),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.eq(
						_user$project$Main$totient(120),
						32),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(
							_user$project$Main$totient(0),
							0),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(
								_user$project$Main$totient(1600),
								640),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.eq(
									_user$project$Main$totient(37),
									36),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Native_Utils.eq(
										_user$project$Main$totient(330),
										80),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Native_Utils.eq(
											_user$project$Main$totient(65934),
											19440),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Native_Utils.eq(
												_user$project$Main$totient(1313),
												1200),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.eq(
													_user$project$Main$totient(45),
													24),
												_1: {
													ctor: '::',
													_0: _elm_lang$core$Native_Utils.eq(
														_user$project$Main$totient(-23),
														0),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}));
var _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	_elm_lang$html$Html$text(
		function () {
			var _p0 = _user$project$Main$test;
			switch (_p0) {
				case 0:
					return 'Your implementation passed all tests.';
				case 1:
					return 'Your implementation failed one test.';
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'Your implementation failed ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p0),
							' tests.'));
			}
		}()));
