var _user$project$Main$split = F2(
	function (list, count) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, count, list),
			_1: A2(_elm_lang$core$List$drop, count, list)
		};
	});
var _user$project$Main$test = A2(
	_elm_lang$core$List$all,
	function (_p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Utils.eq(_p1._0, _p1._1);
	},
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: A2(
				_user$project$Main$split,
				A2(_elm_lang$core$List$range, 1, 5),
				0),
			_1: {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {
					ctor: '::',
					_0: 1,
					_1: {
						ctor: '::',
						_0: 2,
						_1: {
							ctor: '::',
							_0: 3,
							_1: {
								ctor: '::',
								_0: 4,
								_1: {
									ctor: '::',
									_0: 5,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: A2(
					_user$project$Main$split,
					A2(_elm_lang$core$List$range, 1, 5),
					2),
				_1: {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: 1,
						_1: {
							ctor: '::',
							_0: 2,
							_1: {ctor: '[]'}
						}
					},
					_1: {
						ctor: '::',
						_0: 3,
						_1: {
							ctor: '::',
							_0: 4,
							_1: {
								ctor: '::',
								_0: 5,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: A2(
						_user$project$Main$split,
						A2(_elm_lang$core$List$range, 1, 5),
						3),
					_1: {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: 1,
							_1: {
								ctor: '::',
								_0: 2,
								_1: {
									ctor: '::',
									_0: 3,
									_1: {ctor: '[]'}
								}
							}
						},
						_1: {
							ctor: '::',
							_0: 4,
							_1: {
								ctor: '::',
								_0: 5,
								_1: {ctor: '[]'}
							}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: A2(
							_user$project$Main$split,
							A2(_elm_lang$core$List$range, 1, 5),
							4),
						_1: {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 2,
									_1: {
										ctor: '::',
										_0: 3,
										_1: {
											ctor: '::',
											_0: 4,
											_1: {ctor: '[]'}
										}
									}
								}
							},
							_1: {
								ctor: '::',
								_0: 5,
								_1: {ctor: '[]'}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: A2(
								_user$project$Main$split,
								A2(_elm_lang$core$List$range, 1, 5),
								5),
							_1: {
								ctor: '_Tuple2',
								_0: {
									ctor: '::',
									_0: 1,
									_1: {
										ctor: '::',
										_0: 2,
										_1: {
											ctor: '::',
											_0: 3,
											_1: {
												ctor: '::',
												_0: 4,
												_1: {
													ctor: '::',
													_0: 5,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								_1: {ctor: '[]'}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: A2(
									_user$project$Main$split,
									A2(_elm_lang$core$List$range, 1, 5),
									6),
								_1: {
									ctor: '_Tuple2',
									_0: {
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 2,
											_1: {
												ctor: '::',
												_0: 3,
												_1: {
													ctor: '::',
													_0: 4,
													_1: {
														ctor: '::',
														_0: 5,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									_1: {ctor: '[]'}
								}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: A2(
										_user$project$Main$split,
										A2(_elm_lang$core$List$range, 1, 5),
										-1),
									_1: {
										ctor: '_Tuple2',
										_0: {ctor: '[]'},
										_1: {
											ctor: '::',
											_0: 1,
											_1: {
												ctor: '::',
												_0: 2,
												_1: {
													ctor: '::',
													_0: 3,
													_1: {
														ctor: '::',
														_0: 4,
														_1: {
															ctor: '::',
															_0: 5,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}) && A2(
	_elm_lang$core$List$all,
	function (_p2) {
		var _p3 = _p2;
		return _elm_lang$core$Native_Utils.eq(_p3._0, _p3._1);
	},
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: A2(
				_user$project$Main$split,
				{
					ctor: '::',
					_0: 'aab',
					_1: {
						ctor: '::',
						_0: 'b',
						_1: {
							ctor: '::',
							_0: 'c',
							_1: {
								ctor: '::',
								_0: 'aa',
								_1: {ctor: '[]'}
							}
						}
					}
				},
				2),
			_1: {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: 'aab',
					_1: {
						ctor: '::',
						_0: 'b',
						_1: {ctor: '[]'}
					}
				},
				_1: {
					ctor: '::',
					_0: 'c',
					_1: {
						ctor: '::',
						_0: 'aa',
						_1: {ctor: '[]'}
					}
				}
			}
		},
		_1: {ctor: '[]'}
	});
var _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	_elm_lang$html$Html$text(
		_user$project$Main$test ? 'Your implementation passed all tests.' : 'Your implementation failed at least one test.'));
