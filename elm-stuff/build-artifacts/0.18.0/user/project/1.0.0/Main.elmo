var _user$project$Main$isPalindrome = function (xs) {
	var len = _elm_lang$core$List$length(xs);
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$List$take, len, xs),
		A2(
			_elm_lang$core$List$take,
			len,
			_elm_lang$core$List$reverse(xs)));
};
var _user$project$Main$test = _elm_lang$core$List$length(
	A2(
		_elm_lang$core$List$filter,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(false),
		{
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.eq(
				_user$project$Main$isPalindrome(
					{
						ctor: '::',
						_0: 1,
						_1: {
							ctor: '::',
							_0: 3,
							_1: {
								ctor: '::',
								_0: 5,
								_1: {
									ctor: '::',
									_0: 8,
									_1: {
										ctor: '::',
										_0: 5,
										_1: {
											ctor: '::',
											_0: 3,
											_1: {
												ctor: '::',
												_0: 1,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				true),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(
					_user$project$Main$isPalindrome(
						{
							ctor: '::',
							_0: 2,
							_1: {
								ctor: '::',
								_0: 1,
								_1: {ctor: '[]'}
							}
						}),
					false),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.eq(
						_user$project$Main$isPalindrome(
							{
								ctor: '::',
								_0: 1,
								_1: {ctor: '[]'}
							}),
						true),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(
							_user$project$Main$isPalindrome(
								{ctor: '[]'}),
							true),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(
								_user$project$Main$isPalindrome(
									{
										ctor: '::',
										_0: 'aa',
										_1: {
											ctor: '::',
											_0: 'bb',
											_1: {
												ctor: '::',
												_0: 'aa',
												_1: {ctor: '[]'}
											}
										}
									}),
								true),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.eq(
									_user$project$Main$isPalindrome(
										{
											ctor: '::',
											_0: 'aab',
											_1: {
												ctor: '::',
												_0: 'b',
												_1: {
													ctor: '::',
													_0: 'aa',
													_1: {ctor: '[]'}
												}
											}
										}),
									false),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}));
var _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	_elm_lang$html$Html$text(
		function () {
			var _p0 = _user$project$Main$test;
			switch (_p0) {
				case 0:
					return 'Your implementation passed all tests.';
				case 1:
					return 'Your implementation failed one test.';
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'Your implementation failed ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p0),
							' tests.'));
			}
		}()));
